/**
 * shiroyuki/prototype
 * CSS mixins
 *
 * @license MIT
 * @author jnopporn@shiroyuki.com
 *
 * The documentation is based on https://css-tricks.com/snippets/css/a-guide-to-flexbox/.
 */
/**
 * Combo / Flex Container with Common Setup
 */
/**
 * This defines a flex container; inline or block depending on the given value.
 * It enables a flex context for all its direct children.
 */
/**
 * This defines the alignment along the main axis. It helps distribute extra
 * free space left over when either all the flex items on a line are inflexible,
 * or are flexible but have reached their maximum size. It also exerts some
 * control over the alignment of items when they overflow the line.
 *
 * $value:
 *
 * - flex-start (default): items are packed toward the start line
 * - flex-end: items are packed toward to end line
 * - center: items are centered along the line
 * - space-between: items are evenly distributed in the line; first item is on
 *   the start line, last item on the end line
 * - space-around: items are evenly distributed in the line with equal space
 *   around them. Note that visually the spaces aren't equal, since all the
 *   items have equal space on both sides. The first item will have one unit of
 *   space against the container edge, but two units of space between the next
 *   item because that next item has it's own spacing that applies.
 */
/**
 * This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The
 * second and third parameters (flex-shrink and flex-basis) are optional.
 * Default is "0 1 auto".
 *
 * It is recommended that you use this shorthand property rather than set the
 * individual properties. The short hand sets the other values intelligently.
 */
/**
 * This defines the ability for a flex item to grow if necessary. It accepts a
 * unitless value that serves as a proportion. It dictates what amount of the
 * available space inside the flex container the item should take up.
 *
 * If all items have flex-grow set to 1, every child will set to an equal size
 * inside the container. If you were to give one of the children a value of 2,
 * that child would take up twice as much space as the others.
 */
/**
 * This defines the ability for a flex item to shrink if necessary.
 */
/**
 * This defines the default size of an element before the remaining space is
 * distributed. The main-size value makes it match the width or height,
 * depending on which is relevant based on the flex-direction.
 *
 * $value := <length> | auto
 *
 * If set to 0, the extra space around content isn't factored in. If set to
 * auto, the extra space is distributed based on it's flex-grow value.
 *
 * See http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg.
 */
/**
 * By default, flex items are laid out in the source order. However, the order
 * property controls the order in which they appear in the flex container.
 */
/**
 * This establishes the main-axis, thus defining the direction flex items are
 * placed in the flex container. Flexbox is (aside from optional wrapping) a
 * single-direction layout concept. Think of flex items as primarily laying out
 * either in horizontal rows or vertical columns.
 *
 * $direction:
 *
 * - row (default): left to right in ltr; right to left in rtl
 * - row-reverse: right to left in ltr; left to right in rtl
 * - column: same as row but top to bottom
 * - column-reverse: same as row-reverse but bottom to top
 */
/**
 * By default, flex items will all try to fit onto one line. You can change that
 * and allow the items to wrap as needed with this property. Direction also
 * plays a role here, determining the direction new lines are stacked in.
 *
 * $wrap:
 *
 * - nowrap (default): single-line / left to right in ltr; right to left in rtl
 * - wrap: multi-line / left to right in ltr; right to left in rtl
 * - wrap-reverse: multi-line / right to left in ltr; left to right in rtl
 */
/**
 * This defines the default behaviour for how flex items are laid out along the
 * cross axis on the current line. Think of it as the justify-content version
 * for the cross-axis (perpendicular to the main-axis).
 *
 * $alignment:
 *
 * - flex-start: cross-start margin edge of the items is placed on the cross-start line
 * - flex-end: cross-end margin edge of the items is placed on the cross-end line
 * - center: items are centered in the cross-axis
 * - baseline: items are aligned such as their baselines align
 * - stretch (default): stretch to fill the container (still respect min-width/max-width)
 */
/**
 * This aligns a flex container's lines within when there is extra space in the
 * cross-axis, similar to how justify-content aligns individual items within
 * the main-axis.
 *
 * Note: this property has no effect when there is only one line of flex items.
 *
 * $alignment:
 *
 * - flex-start: lines packed to the start of the container
 * - flex-end: lines packed to the end of the container
 * - center: lines packed to the center of the container
 * - space-between: lines evenly distributed; the first line is at the start of the container while the last one is at the end
 * - space-around: lines evenly distributed with equal space around each line
 * - stretch (default): lines stretch to take up the remaining space
 */
/***** Filter *****/
/***** Transformation *****/
/***** Transition *****/
/**
 * Predefined Colour Palette
 */
body {
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, system, "Helvetica Neue", "Helvetica", "Ubuntu", "Arial", sans-serif;
  font-size: 16px;
  font-weight: 300;
  margin: 0;
  padding: 0; }

body > footer {
  margin-top: 8px;
  border-top: 1px solid #F5F5F5;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: flex;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: stretch;
  -moz-align-items: stretch;
  -ms-align-items: stretch;
  align-items: stretch;
  -webkit-justify-content: space-between;
  -moz-justify-content: space-between;
  -ms-justify-content: space-between;
  justify-content: space-between;
  color: #9E9E9E; }

body > footer > .credit-design, body > footer > .credit-software {
  padding: 8px 16px; }

body > .container {
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: flex;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: stretch;
  -moz-align-items: stretch;
  -ms-align-items: stretch;
  align-items: stretch; }

body > .container > article {
  -webkit-order: 2;
  -moz-order: 2;
  -ms-order: 2;
  order: 2;
  -webkit-flex-grow: 1;
  -moz-flex-grow: 1;
  -ms-flex-grow: 1;
  flex-grow: 1;
  padding: 8px 16px; }

body > .container > article > :first-child {
  margin-top: 0;
  padding-top: 0; }

body > .container nav.main {
  -webkit-order: 1;
  -moz-order: 1;
  -ms-order: 1;
  order: 1;
  width: 160px; }

body > .container nav.main ol {
  list-style: none;
  margin: 0;
  padding: 0; }

body > .container nav.main ol li {
  margin: 0;
  padding: 0; }

body > .container nav.main ol li a {
  display: block;
  color: #616161;
  text-decoration: none;
  padding: 8px 16px;
  border-bottom: 1px solid #F5F5F5; }

body > .container nav.main ol li.current a {
  color: #000000; }

body > .container nav.main ol li:last-child a {
  border-bottom: none; }

body > .container nav.ancestors ol {
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: flex;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: stretch;
  -moz-align-items: stretch;
  -ms-align-items: stretch;
  align-items: stretch;
  list-style: none;
  margin: -8px -16px 0 -16px;
  padding: 0;
  border-bottom: 1px solid #F5F5F5; }

body > .container nav.ancestors ol li {
  display: block;
  margin: 0;
  padding: 0; }

body > .container nav.ancestors ol li a {
  display: block;
  color: #616161;
  text-decoration: none;
  padding: 8px 16px;
  border-right: 1px solid #F5F5F5; }

body > .container nav.ancestors ol li:last-child a {
  border-right: none;
  color: #000000; }

body > .container nav.ancestors ol:empty {
  display: none; }

/**
 * Predefined Colour Palette
 */
body > .container > article nav.ancestors[data-count="0"] {
  display: none; }

body > .container > article nav.ancestors[data-count="0"] + * {
  margin-top: 0;
  padding-top: 8px; }
